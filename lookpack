import re
from docx import Document

def get_client_for_mandat(doc: Document, mandatno, lookback=3) -> str:
    """
    Extracts the client name for a given 'mandatno' from a loaded python-docx Document.
    Looks several paragraphs above the mandate number for the full client header.

    Args:
        doc: python-docx Document object
        mandatno: Mandate number (int or str)
        lookback: How many paragraphs above to check (default 3)
    Returns:
        Client name as string, or None if not found
    """
    paragraphs = [p.text.strip() for p in doc.paragraphs]
    # Regex for Mandat no : <number>
    mandat_re = re.compile(r"Mandat\s*no\s*:?[\s ]*({})\b".format(re.escape(str(mandatno))), re.IGNORECASE)
    
    for idx, para in enumerate(paragraphs):
        if mandat_re.match(para):
            # Look up a few paragraphs for the client name/header
            candidates = []
            for offset in range(1, lookback + 1):
                prev_idx = idx - offset
                if prev_idx < 0:
                    break
                prev_text = paragraphs[prev_idx]
                # Ignore empty or field keywords (you can adjust these as needed)
                if prev_text and not prev_text.lower().startswith((
                    "projet", "fonction", "envergure", "période",
                    "efforts", "référence", "mandat no", "client"
                )):
                    candidates.insert(0, prev_text)  # maintain document order
            if candidates:
                return " ".join(candidates).strip()
            break
    return None

# === Example usage ===

# Load your document:
# doc = Document('Bernier_Sylvain_CV_25-07 v2 2_Sans_Table_Mandat_3 - Copie.docx')
# For mandate 9:
# print(get_client_for_mandat(doc, 9))
# Output: Retraite Québec (RetQC) - (CARRA - Commission administrative des régimes de retraite et d’assurances)

# You can use this for any mandate:
# print(get_client_for_mandat(doc, 2))
# print(get_client_for_mandat(doc, 7))
# print(get_client_for_mandat(doc, 15))
