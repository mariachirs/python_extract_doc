from typing import Union
import io
import zipfile
from lxml import etree
from docx import Document

try:
    from fastapi import UploadFile
except ImportError:
    UploadFile = None

# Namespaces for WordprocessingML
NAMESPACES = {
    'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'
}

def clean_docx_from_bytes(file_data: Union['UploadFile', bytes], diagnostics: bool = False) -> Document:
    """
    Clean a DOCX file (from UploadFile or bytes), removing:
    - All tracked changes (insertions, deletions, moves)
    - All comments
    - All formatting balloons (e.g. "25 juillet 2025 a mis en forme le tableau")
    - All rsid* attributes (revision session metadata)

    Returns a clean python-docx Document object.
    """

    def get_bytes(data):
        if hasattr(data, "file"):
            return data.file.read()
        elif isinstance(data, bytes):
            return data
        raise TypeError("file_data must be UploadFile or bytes")

    def clean_xml(xml_data: bytes, filename: str) -> bytes:
        xml = etree.fromstring(xml_data)

        if diagnostics:
            def count(tag): return len(xml.xpath(f'//w:{tag}', namespaces=NAMESPACES))
            print(f"üìÑ {filename}")
            print(f"  üó®Ô∏è Comments:               {count('commentReference')}")
            print(f"  ‚ûï Insertions:             {count('ins')}")
            print(f"  ‚ûñ Deletions:              {count('del')}")
            print(f"  üîÅ Moves:                  {count('moveFrom') + count('moveTo')}")
            print(f"  üé® Formatting revisions:   {count('rPrChange') + count('pPrChange') + count('tblPrChange')}")
            print()

        # Accept all insertions by keeping their inner content
        for ins in xml.xpath('//w:ins', namespaces=NAMESPACES):
            parent = ins.getparent()
            index = parent.index(ins)
            for child in list(ins):
                parent.insert(index, child)
                index += 1
            parent.remove(ins)

        # Remove all tracked change and comment tags
        tags_to_remove = [
            'del', 'moveFrom', 'moveTo',
            'commentRangeStart', 'commentRangeEnd', 'commentReference',
            'rPrChange', 'pPrChange', 'tblPrChange',
            'proofErr', 'permStart', 'permEnd',
            'bookmarkStart', 'bookmarkEnd', 'trackChanges'
        ]
        for tag in tags_to_remove:
            for elem in xml.xpath(f'//w:{tag}', namespaces=NAMESPACES):
                if elem.getparent() is not None:
                    elem.getparent().remove(elem)

        # Remove rsid* attributes (revision session tracking)
        for elem in xml.iter():
            for attr in list(elem.attrib):
                if 'rsid' in attr:
                    del elem.attrib[attr]

        return etree.tostring(xml, encoding='UTF-8', xml_declaration=True, standalone="yes")

    raw_bytes = get_bytes(file_data)
    input_buffer = io.BytesIO(raw_bytes)
    output_buffer = io.BytesIO()

    # Clean relevant parts of the DOCX archive
    with zipfile.ZipFile(input_buffer, 'r') as zin:
        with zipfile.ZipFile(output_buffer, 'w', zipfile.ZIP_DEFLATED) as zout:
            for item in zin.infolist():
                data = zin.read(item.filename)

                if item.filename.startswith("word/") and item.filename.endswith(".xml"):
                    if item.filename == 'word/comments.xml':
                        data = b''  # Strip the comments file completely
                    else:
                        try:
                            data = clean_xml(data, item.filename)
                        except Exception as e:
                            print(f"[ERROR] Failed to clean {item.filename}: {e}")

                zout.writestr(item, data)

    # Return clean DOCX as python-docx Document
    output_buffer.seek(0)
    return Document(output_buffer)
