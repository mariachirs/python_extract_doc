from docx import Document
import pprint

# Assumes the extract_tasks_by_proj_fonc function is defined in scope
from docx.oxml.table import CT_Tbl
from docx.oxml.text.paragraph import CT_P
from docx.text.paragraph import Paragraph
import re

def full_cell_text(cell):
    texts = []
    for paragraph in cell.paragraphs:
        texts.append(''.join(run.text for run in paragraph.runs))
    return ' '.join(texts).strip()

def normalize(s: str) -> str:
    return re.sub(r'\s+', ' ', s.replace('\xa0', ' ')).strip().lower()

def extract_tasks_by_proj_fonc(doc: Document, projet_filter: str, fonction_filter: str):
    pf = normalize(projet_filter)
    ff = normalize(fonction_filter)

    detail_idxs = [
        idx for idx, tbl in enumerate(doc.tables)
        if normalize(full_cell_text(tbl.rows[0].cells[0])).startswith("mandat no")
    ]

    chosen = None
    for idx in detail_idxs:
        tbl = doc.tables[idx]
        projet_raw = full_cell_text(tbl.rows[1].cells[1])
        fonction_raw = full_cell_text(tbl.rows[3].cells[1])
        if pf in normalize(projet_raw) and ff in normalize(fonction_raw):
            chosen = (idx, projet_raw.strip(), fonction_raw.strip())
            break

    tbl_idx, projet, fonction = chosen

    body_children = list(doc.element.body.iterchildren())
    xml_idx = next(
        i for i, ch in enumerate(body_children)
        if isinstance(ch, CT_Tbl) and doc.tables[tbl_idx]._tbl is ch
    )

    start = None
    for i in range(xml_idx + 1, len(body_children)):
        ch = body_children[i]
        if isinstance(ch, CT_P):
            txt = normalize(Paragraph(ch, doc).text)
            if "a effectué les tâches suivantes" in txt:
                start = i + 1
                break

    tasks = []
    for j in range(start, len(body_children)):
        ch = body_children[j]
        if isinstance(ch, CT_Tbl):
            break
        if isinstance(ch, CT_P):
            line = Paragraph(ch, doc).text.strip()
            if not line:
                continue
            if normalize(line).startswith("les livrables suivants ont été réalisés"):
                break
            tasks.append(line)

    result_categories = []
    current_cat = None
    for line in tasks:
        if not re.search(r'[;.:]\s*$', line):
            current_cat = line
            result_categories.append({"categorie": current_cat, "tasks": []})
        elif current_cat:
            result_categories[-1]["tasks"].append(re.sub(r'[;.]$', '', line).strip())

    return {
        "projet": projet,
        "fonction": fonction,
        "tasks_by_category": result_categories
    }

# Load document and test all three mandates
doc = Document("/mnt/data/Bernier_Sylvain_CV_25-06-17 - V2 - Many Conferences.docx")

outputs = [
    extract_tasks_by_proj_fonc(
        doc,
        projet_filter="Révision des processus et du système informatique des pensions alimentaires",
        fonction_filter="Architecte fonctionnel"
    ),
    extract_tasks_by_proj_fonc(
        doc,
        projet_filter="Relation entre les caisses et le Registre des droits personnels et réels mobiliers",
        fonction_filter="Chef d'équipe et analyste fonctionnel"
    ),
    extract_tasks_by_proj_fonc(
        doc,
        projet_filter="Décentralisation des services à la clientèle",
        fonction_filter="Chef d'équipe et analyste fonctionnel"
    )
]

pprint.pprint(outputs, width=120)
