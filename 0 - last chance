# Complete Python extraction script for DOCX mandates

from docx import Document
from docx.oxml.table import CT_Tbl
from docx.oxml.text.paragraph import CT_P
from docx.text.paragraph import Paragraph
import re

def full_cell_text(cell):
    """
    Concatenate all text across all paragraphs and runs in a cell.
    """
    texts = []
    for paragraph in cell.paragraphs:
        texts.append(''.join(run.text for run in paragraph.runs))
    return ' '.join(texts).strip()

def normalize(s: str) -> str:
    """
    Lowercase, replace non-breaking spaces with regular spaces, and collapse whitespace.
    """
    return re.sub(r'\s+', ' ', s.replace('\xa0', ' ')).strip().lower()

def extract_tasks_by_proj_fonc(doc: Document, projet_filter: str, fonction_filter: str):
    """
    Extract tasks grouped by category for a given projet and fonction.
    Returns a dict with keys:
      - 'projet': project name
      - 'fonction': role name
      - 'tasks_by_category': list of dicts { 'categorie': category_name, 'tasks': [...] }
    """

    # Prepare filters
    pf = normalize(projet_filter)
    ff = normalize(fonction_filter)

    # 1. Identify "Mandat no" tables dynamically
    detail_idxs = [
        idx for idx, tbl in enumerate(doc.tables)
        if normalize(full_cell_text(tbl.rows[0].cells[0])).startswith("mandat no")
    ]
    if not detail_idxs:
        raise ValueError("No 'Mandat no' tables found in the document.")

    # 2. Select the table matching our filters
    chosen = None
    for idx in detail_idxs:
        tbl = doc.tables[idx]
        # Correct rows: Projet in row 2 (index 1), Fonction in row 4 (index 3)
        projet_raw   = full_cell_text(tbl.rows[1].cells[1])
        fonction_raw = full_cell_text(tbl.rows[3].cells[1])
        if pf in normalize(projet_raw) and ff in normalize(fonction_raw):
            chosen = (idx, projet_raw.strip(), fonction_raw.strip())
            break
    if not chosen:
        raise ValueError(f"No mandate matching Projet='{projet_filter}' and Fonction='{fonction_filter}' found.")

    tbl_idx, projet, fonction = chosen

    # 3. Locate the XML index of this table in the document body
    body_children = list(doc.element.body.iterchildren())
    xml_idx = next(
        i for i, ch in enumerate(body_children)
        if isinstance(ch, CT_Tbl) and doc.tables[tbl_idx]._tbl is ch
    )

    # 4. Find the paragraph that starts the task list
    start = None
    for i in range(xml_idx + 1, len(body_children)):
        ch = body_children[i]
        if isinstance(ch, CT_P):
            txt = normalize(Paragraph(ch, doc).text)
            if "a effectué les tâches suivantes" in txt:
                start = i + 1
                break
    if start is None:
        raise ValueError("Could not locate the 'a effectué les tâches suivantes' paragraph.")

    # 5. Collect lines until the next table or the 'livrables' section
    tasks = []
    for j in range(start, len(body_children)):
        ch = body_children[j]
        if isinstance(ch, CT_Tbl):
            break
        if isinstance(ch, CT_P):
            line = Paragraph(ch, doc).text.strip()
            if not line:
                continue
            if normalize(line).startswith("les livrables suivants ont été réalisés"):
                break
            tasks.append(line)

    # 6. Group tasks under their categories
    grouped = []
    current_cat = None
    for line in tasks:
        # A category is a line without trailing punctuation
        if not re.search(r'[;.:]\s*$', line):
            current_cat = line
            grouped.append({"categorie": current_cat, "tasks": []})
        elif current_cat:
            grouped[-1]["tasks"].append(re.sub(r'[;.]$', '', line).strip())

    return {
        "projet": projet,
        "fonction": fonction,
        "tasks_by_category": grouped
    }

# Example usage:

if __name__ == "__main__":
    doc_path = "Bernier_Sylvain_CV_25-06-17 - V2 - Many Conferences.docx"
    doc = Document(doc_path)

    filters = [
        ("Révision des processus et du système informatique des pensions alimentaires (RPSIPA)", "Architecte fonctionnel"),
        ("Relation entre les caisses et le Registre des droits personnels et réels mobiliers", "Chef d'équipe et analyste fonctionnel"),
        ("Décentralisation des services à la clientèle", "Chef d'équipe et analyste fonctionnel"),
    ]

    import pprint
    results = []
    for proj, fonc in filters:
        res = extract_tasks_by_proj_fonc(doc, proj, fonc)
        results.append(res)

    pprint.pprint(results, width=120)
