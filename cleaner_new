import io
import zipfile
from lxml import etree
from docx import Document
from typing import Union

try:
    from fastapi import UploadFile  # optional dependency
except ImportError:
    UploadFile = None  # Allow compatibility without FastAPI

# WordprocessingML namespace
NAMESPACES = {
    'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'
}

def _print_diagnostics(xml, filename):
    def count(tag):
        return len(xml.xpath(f'//w:{tag}', namespaces=NAMESPACES))

    print(f"📄 {filename}")
    print(f"  🗨️ Comments:               {count('commentReference')}")
    print(f"  ➕ Insertions:             {count('ins')}")
    print(f"  ➖ Deletions:              {count('del')}")
    print(f"  🔁 Moves:                  {count('moveFrom') + count('moveTo')}")
    print(f"  🎨 Formatting revisions:   {count('rPrChange') + count('pPrChange') + count('tblPrChange')}")
    print("")

def _clean_xml_part(xml_data: bytes, diagnostics: bool, filename: str) -> bytes:
    xml = etree.fromstring(xml_data)

    if diagnostics:
        _print_diagnostics(xml, filename)

    for ins in xml.xpath('//w:ins', namespaces=NAMESPACES):
        parent = ins.getparent()
        index = parent.index(ins)
        for child in list(ins):
            parent.insert(index, child)
            index += 1
        parent.remove(ins)

    tags_to_remove = [
        'del', 'moveFrom', 'moveTo',
        'commentRangeStart', 'commentRangeEnd', 'commentReference',
        'rPrChange', 'pPrChange', 'tblPrChange',
        'proofErr', 'permStart', 'permEnd', 'bookmarkStart', 'bookmarkEnd',
        'trackChanges'
    ]

    for tag in tags_to_remove:
        for elem in xml.xpath(f'//w:{tag}', namespaces=NAMESPACES):
            elem.getparent().remove(elem)

    return etree.tostring(xml, encoding='UTF-8', xml_declaration=True, standalone="yes")

def clean_docx_from_bytes(file_data: Union['UploadFile', bytes], diagnostics: bool = False) -> Document:
    """
    Clean a .docx file:
    - Accepts all tracked changes
    - Removes all comments and formatting revisions
    - Works on headers/footers too
    - Returns a clean python-docx Document

    Parameters:
        file_data (Union[UploadFile, bytes]): The uploaded .docx file or byte content
        diagnostics (bool): If True, prints revision/comment statistics

    Returns:
        Document: Cleaned python-docx Document
    """
    if hasattr(file_data, "file"):  # it's an UploadFile-like object
        file_bytes = file_data.file.read()
    elif isinstance(file_data, bytes):
        file_bytes = file_data
    else:
        raise TypeError("file_data must be of type 'UploadFile' or 'bytes'")

    input_buffer = io.BytesIO(file_bytes)
    output_buffer = io.BytesIO()

    with zipfile.ZipFile(input_buffer, 'r') as zin:
        editable_parts = [
            item.filename for item in zin.infolist()
            if item.filename.startswith("word/") and (
                item.filename == 'word/document.xml' or
                item.filename.startswith('word/header') or
                item.filename.startswith('word/footer') or
                item.filename == 'word/comments.xml'
            )
        ]

        with zipfile.ZipFile(output_buffer, 'w', zipfile.ZIP_DEFLATED) as zout:
            for item in zin.infolist():
                data = zin.read(item.filename)

                if item.filename in editable_parts:
                    if item.filename == 'word/comments.xml':
                        data = b''
                    else:
                        data = _clean_xml_part(data, diagnostics, item.filename)

                zout.writestr(item, data)

    output_buffer.seek(0)
    return Document(output_buffer)
