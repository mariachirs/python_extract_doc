from docx import Document
from io import BytesIO
from collections import Counter

def load_docx_from_memory(file_bytes):
    """Load a .docx file into memory and return a Document object."""
    return Document(BytesIO(file_bytes))

def check_cv_unique_headers(doc):
    expected_titles = [
        "Principaux domaines",
        "Formation académique",
        "Certifications",
        "Résumé des interventions",
        "Perfectionnement",
        "Langues parlées, écrites"
    ]
    
    # Normalize paragraph texts and count occurrences
    para_texts = [para.text.strip().lower() for para in doc.paragraphs if para.text.strip()]
    text_counts = Counter(para_texts)

    expected_lower = [title.lower() for title in expected_titles]

    missing = []
    duplicated = []

    for title_lower, title_original in zip(expected_lower, expected_titles):
        count = text_counts.get(title_lower, 0)
        if count == 0:
            missing.append(title_original)
        elif count > 1:
            duplicated.append((title_original, count))

    return {
        "status": "ok" if not missing and not duplicated else "error",
        "missing_headers": missing,
        "duplicated_headers": duplicated
    }
#########################


with open("CV-Gabarit-LGS-2023.docx", "rb") as f:
    file_bytes = f.read()

doc = load_docx_from_memory(file_bytes)
result = check_cv_unique_headers(doc)

if result["status"] == "ok":
    print("✅ All required headers appear exactly once.")
else:
    if result["missing_headers"]:
        print("❌ Missing headers:", result["missing_headers"])
    if result["duplicated_headers"]:
        print("⚠️ Headers that appear more than once:")
        for title, count in result["duplicated_headers"]:
            print(f" - '{title}' appears {count} times")
