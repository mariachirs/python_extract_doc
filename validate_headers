def load_docx_from_memory(file_bytes):
    """Load a .docx file into memory and return a Document object."""
    return Document(BytesIO(file_bytes))

def check_cv_unique_headers_or_throw(doc):
    expected_titles = [
        "Principaux domaines",
        "Formation académique",
        "Certifications",
        "Résumé des interventions",
        "Perfectionnement",
        "Langues parlées, écrites"
    ]

    para_texts = [para.text.strip().lower() for para in doc.paragraphs if para.text.strip()]
    text_counts = Counter(para_texts)

    expected_lower = [title.lower() for title in expected_titles]

    missing = []
    duplicated = []

    for title_lower, title_original in zip(expected_lower, expected_titles):
        count = text_counts.get(title_lower, 0)
        if count == 0:
            missing.append(title_original)
        elif count > 1:
            duplicated.append((title_original, count))

    if missing or duplicated:
        messages = []
        if missing:
            messages.append(f"Missing headers: {', '.join(missing)}")
        if duplicated:
            dups = ', '.join(f"'{title}' ({count}x)" for title, count in duplicated)
            messages.append(f"Duplicated headers: {dups}")
        raise ValueError("Header validation failed: " + " | ".join(messages))

    return True  # Everything is OK


===========================

try:
    with open("CV-Gabarit-LGS-2023.docx", "rb") as f:
        doc = load_docx_from_memory(f.read())
    check_cv_unique_headers_or_throw(doc)
    print("✅ Headers are valid.")
except ValueError as e:
    # In a real web API, you'd raise an HTTPException here instead
    print(f"❌ HTTP 400: {e}")

========



try:
    with open("CV-Gabarit-LGS-2023.docx", "rb") as f:
        doc = load_docx_from_memory(f.read())
    check_cv_unique_headers_or_throw(doc)
    print("✅ Headers are valid.")
except ValueError as e:
    # In a real web API, you'd raise an HTTPException here instead
    print(f"❌ HTTP 400: {e}")
