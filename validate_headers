from docx import Document
from io import BytesIO

def load_docx_from_memory(file_bytes):
    """Load a .docx file into memory and return a Document object."""
    file_stream = BytesIO(file_bytes)
    return Document(file_stream)

def check_cv_headers_only_heading(doc):
    expected_titles = [
        "Principaux domaines",
        "Formation académique",
        "Certifications",
        "Résumé des interventions",
        "Perfectionnement",
        "Langues parlées, écrites"
    ]

    known_heading_keywords = {"heading", "titre"}  # Accepts styles like 'Heading 1', 'Titre 1'
    expected_lower = [title.lower() for title in expected_titles]
    found = set()

    for para in doc.paragraphs:
        text = para.text.strip().lower()
        style_name = para.style.name.lower()
        if text in expected_lower and any(k in style_name for k in known_heading_keywords):
            found.add(text)

    missing = [title for title in expected_titles if title.lower() not in found]

    return {
        "status": "ok" if not missing else "error",
        "missing_headers": missing
    }
#################################

with open("CV-Gabarit-LGS-2023.docx", "rb") as f:
    file_bytes = f.read()

doc = load_docx_from_memory(file_bytes)
result = check_cv_headers_only_heading(doc)

if result["status"] == "ok":
    print("✅ All required headers found using heading styles.")
else:
    print("❌ Missing headers with heading styles:", result["missing_headers"])
