# file: extract_mandats_to_json.py

import zipfile
from lxml import etree
from pathlib import Path
import json
import re


def extract_mandats_to_json(docx_filename: str):
    folder = Path("C:/Validation")
    docx_path = folder / docx_filename
    output_json_path = folder / f"{docx_path.stem}_mandats.json"

    with zipfile.ZipFile(docx_path) as docx_zip:
        if 'word/document.xml' not in docx_zip.namelist():
            raise FileNotFoundError("document.xml not found in DOCX.")

        xml_content = docx_zip.read('word/document.xml')
        tree = etree.fromstring(xml_content)

        ns = {'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'}
        paragraphs = tree.findall('.//w:p', namespaces=ns)

        mandats = []
        current = {}
        org_buffer = []
        buffer = []
        collecting = False

        def clean(text):
            return text.replace('\xa0', ' ').replace('\u202f', ' ').strip()

        for para in paragraphs:
            texts = para.findall('.//w:t', namespaces=ns)
            para_text = ''.join(t.text for t in texts if t.text).strip()
            para_text = clean(para_text)

            if not para_text:
                continue

            # Detect start of a new mandat
            if re.match(r'^mandat\s+no\s*[:：]', para_text, re.IGNORECASE):
                if buffer and current:
                    current['Description'] = ' '.join(buffer).strip()
                    mandats.append(current)

                buffer = []
                current = {}
                collecting = True

                if len(org_buffer) >= 2:
                    current['Name of company'] = org_buffer[-2]
                    current['Client'] = org_buffer[-1]
                elif org_buffer:
                    current['Name of company'] = org_buffer[-1]
                    current['Client'] = "Unknown"
                else:
                    current['Name of company'] = "Unknown"
                    current['Client'] = "Unknown"

                current['Mandat no'] = para_text.split(':', 1)[-1].strip()
            elif collecting:
                lower = para_text.lower()
                if lower.startswith("projet"):
                    current['Projet'] = para_text.split(':', 1)[-1].strip()
                elif lower.startswith("envergure"):
                    current['Envergure'] = para_text.split(':', 1)[-1].strip()
                elif lower.startswith("fonction"):
                    current['Fonction'] = para_text.split(':', 1)[-1].strip()
                elif lower.startswith("période"):
                    current['Période'] = para_text.split(':', 1)[-1].strip()
                elif lower.startswith("efforts"):
                    current['Efforts'] = para_text.split(':', 1)[-1].strip()
                elif lower.startswith("référence"):
                    current['Référence'] = para_text.split(':', 1)[-1].strip()
                elif lower.startswith("environnement technologique"):
                    current['Environnement technologique'] = ''
                elif 'Environnement technologique' in current:
                    current['Environnement technologique'] += ' ' + para_text
                else:
                    buffer.append(para_text)
            else:
                org_buffer.append(para_text)

        if buffer and current:
            current['Description'] = ' '.join(buffer).strip()
            mandats.append(current)

        with open(output_json_path, 'w', encoding='utf-8') as f:
            json.dump(mandats, f, ensure_ascii=False, indent=2)

    print(f"Saved {len(mandats)} mandats to {output_json_path}")

# Run it
extract_mandats_to_json('MARTINS_Roni_CV_24-04-22.docx')
