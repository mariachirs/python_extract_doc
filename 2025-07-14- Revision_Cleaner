import io
import zipfile
from typing import Union
from fastapi import UploadFile
from docx import Document
from lxml import etree

NAMESPACES = {'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'}

def _clean_revisions_lxml(xml_bytes: bytes) -> bytes:
    """
    Remove <w:del> and flatten <w:ins> tags using lxml for better namespace handling.
    """
    parser = etree.XMLParser(ns_clean=True, recover=True)
    root = etree.fromstring(xml_bytes, parser=parser)

    # Remove <w:del>
    for del_el in root.xpath(".//w:del", namespaces=NAMESPACES):
        del_el.getparent().remove(del_el)

    # Flatten <w:ins>
    for ins_el in root.xpath(".//w:ins", namespaces=NAMESPACES):
        parent = ins_el.getparent()
        index = parent.index(ins_el)
        for child in reversed(ins_el):
            parent.insert(index, child)
        parent.remove(ins_el)

    return etree.tostring(root, encoding='utf-8', xml_declaration=True)

def load_clean_docx_memory(file_data: Union[UploadFile, bytes]) -> Document:
    """
    Accepts all tracked revisions in a .docx file and returns a cleaned python-docx Document object.
    Works entirely in memory.
    """
    if isinstance(file_data, UploadFile):
        file_data.file.seek(0)  # rewind the stream
        file_bytes = file_data.file.read()
    elif isinstance(file_data, bytes):
        file_bytes = file_data
    else:
        raise TypeError("file_data must be UploadFile or bytes")

    in_buffer = io.BytesIO(file_bytes)
    out_buffer = io.BytesIO()

    with zipfile.ZipFile(in_buffer, 'r') as zin:
        with zipfile.ZipFile(out_buffer, 'w', zipfile.ZIP_DEFLATED) as zout:
            for item in zin.infolist():
                data = zin.read(item.filename)

                if item.filename.startswith("word/") and (
                    item.filename.endswith("document.xml") or
                    item.filename.startswith("word/header") or
                    item.filename.startswith("word/footer") or
                    item.filename.endswith("footnotes.xml") or
                    item.filename.endswith("endnotes.xml") or
                    item.filename.endswith("comments.xml")
                ):
                    try:
                        data = _clean_revisions_lxml(data)
                    except Exception:
                        pass  # keep original data if any error

                zout.writestr(item, data)

    out_buffer.seek(0)
    return Document(out_buffer)
