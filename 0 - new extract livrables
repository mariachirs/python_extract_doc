RONI


from typing import Dict, List
from docx import Document

def extract_livrables(
    doc: Document, fonction: str, projet: str
) -> Dict[str, List[str]]:
    """
    Extrait les catégories et livrables pour une section spécifiée par fonction et projet.
    Utilise les puces :
      • Catégorie
       Livrable
    S'arrête à la détection de la chaîne stop ou d'une nouvelle section.
    """
    # Repérer début de section
    paras = [p for p in doc.paragraphs]
    start_idx = None
    for i, p in enumerate(paras):
        txt = p.text.strip()
        if txt.startswith("Projet :") and projet in txt:
            # Cherche fonction suivante
            for j in range(i+1, len(paras)):
                t2 = paras[j].text.strip()
                if t2.startswith("Fonction :") and fonction in t2:
                    start_idx = j + 1
                    break
            break
    if start_idx is None:
        raise ValueError(f"Section pour fonction '{fonction}' et projet '{projet}' non trouvée.")

    stop_phrase = "TECHNOLOGIES UTILISÉES DANS LE CADRE DU MANDAT"
    result: Dict[str, List[str]] = {}
    current_cat = None

    # Parcours lignes puces
    for p in paras[start_idx:]:
        text = p.text.strip()
        # Stop conditions
        if stop_phrase in text or text.startswith("Projet :") or text.startswith("Fonction :"):
            break
        if text.startswith("•"):
            # nouvelle catégorie
            cat = text.lstrip("•").strip().rstrip('.').strip()
            current_cat = cat
            result[current_cat] = []
        elif text.startswith("") and current_cat:
            # livrable sous la catégorie courante
            liv = text.lstrip("").strip().rstrip('.').strip()
            result[current_cat].append(liv)
        else:
            continue

    if not result:
        raise ValueError("Aucun livrable extrait pour la section donnée.")
    return result

# Exemple simplifié
doc = Document('/mnt/data/Bernier_Sylvain_CV_25-06-10 - V2.docx')
print(extract_livrables(
    doc,
    "Architecte fonctionnel",
    "Révision des processus et du système informatique des pensions alimentaires (RPSIPA)"
))
